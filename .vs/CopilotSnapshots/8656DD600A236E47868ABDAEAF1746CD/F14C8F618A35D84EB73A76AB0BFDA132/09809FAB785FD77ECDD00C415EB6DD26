using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Moq;
using PeopleHub.API.Controllers;
using PeopleHub.Application.DTOs;
using PeopleHub.Application.Features.Auth.Commands;

namespace PeopleHub.Test.Controllers
{
    public class AuthControllerTests
    {
        private readonly Mock<IMediator> _mediatorMock;
        private readonly AuthController _controller;

        public AuthControllerTests()
        {
            _mediatorMock = new Mock<IMediator>();
            _controller = new AuthController(_mediatorMock.Object);
        }

        #region Login Tests

        [Fact]
        public async Task Login_WithValidCredentials_ReturnsOkWithToken()
        {
            // Arrange
            LoginDto loginDto = new LoginDto
            {
                Username = "12345678901",
                Password = "123456"
            };

            LoginResponseDto expectedResponse = new LoginResponseDto
            {
                Token = "fake_jwt_token",
                Username = "12345678901",
                ExpiresAt = DateTime.UtcNow.AddHours(1)
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<LoginCommand>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            ActionResult<LoginResponseDto> result = await _controller.Login(loginDto);

            // Assert
            OkObjectResult okResult = Assert.IsType<OkObjectResult>(result.Result);
            LoginResponseDto returnValue = Assert.IsType<LoginResponseDto>(okResult.Value);
            Assert.Equal(expectedResponse.Token, returnValue.Token);
            Assert.Equal(expectedResponse.Username, returnValue.Username);
        }

        [Fact]
        public async Task Login_WithInvalidCredentials_ReturnsUnauthorized()
        {
            // Arrange
            LoginDto loginDto = new LoginDto
            {
                Username = "12345678901",
                Password = "wrongpassword"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<LoginCommand>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(new UnauthorizedAccessException("Credenciais inválidas"));

            // Act
            ActionResult<LoginResponseDto> result = await _controller.Login(loginDto);

            // Assert
            UnauthorizedObjectResult unauthorizedResult = Assert.IsType<UnauthorizedObjectResult>(result.Result);
            object? errorResponse = unauthorizedResult.Value;
            Assert.NotNull(errorResponse);
        }

        [Fact]
        public async Task Login_WithArgumentException_ReturnsBadRequest()
        {
            // Arrange
            LoginDto loginDto = new LoginDto
            {
                Username = "",
                Password = "123456"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<LoginCommand>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(new ArgumentException("Username é obrigatório"));

            // Act
            ActionResult<LoginResponseDto> result = await _controller.Login(loginDto);

            // Assert
            BadRequestObjectResult badRequestResult = Assert.IsType<BadRequestObjectResult>(result.Result);
            Assert.NotNull(badRequestResult.Value);
        }

        [Fact]
        public async Task Login_WithGenericException_ReturnsInternalServerError()
        {
            // Arrange
            LoginDto loginDto = new LoginDto
            {
                Username = "12345678901",
                Password = "123456"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<LoginCommand>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(new Exception("Database connection failed"));

            // Act
            ActionResult<LoginResponseDto> result = await _controller.Login(loginDto);

            // Assert
            ObjectResult statusCodeResult = Assert.IsType<ObjectResult>(result.Result);
            Assert.Equal(StatusCodes.Status500InternalServerError, statusCodeResult.StatusCode);
        }

        #endregion

        #region Register Tests

        [Fact]
        public async Task Register_WithValidData_ReturnsCreated()
        {
            // Arrange
            RegisterDto registerDto = new RegisterDto
            {
                Nome = "João Silva",
                Sexo = "M",
                Email = "joao@email.com",
                DataNascimento = new DateTime(1990, 5, 15),
                Naturalidade = "São Paulo",
                Nacionalidade = "Brasileira",
                CPF = "12345678901",
                Password = "123456"
            };

            RegisterResponseDto expectedResponse = new RegisterResponseDto
            {
                Message = "Usuário registrado com sucesso",
                Username = "12345678901",
                Email = "joao@email.com"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<RegisterCommand>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedResponse);

            // Act
            ActionResult<RegisterResponseDto> result = await _controller.Register(registerDto);

            // Assert
            CreatedAtActionResult createdResult = Assert.IsType<CreatedAtActionResult>(result.Result);
            RegisterResponseDto returnValue = Assert.IsType<RegisterResponseDto>(createdResult.Value);
            Assert.Equal(expectedResponse.Message, returnValue.Message);
            Assert.Equal(expectedResponse.Username, returnValue.Username);
            Assert.Equal(expectedResponse.Email, returnValue.Email);
        }

        [Fact]
        public async Task Register_WithInvalidCPF_ReturnsBadRequest()
        {
            // Arrange
            RegisterDto registerDto = new RegisterDto
            {
                Nome = "João Silva",
                CPF = "invalid_cpf",
                DataNascimento = new DateTime(1990, 5, 15),
                Password = "123456"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<RegisterCommand>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(new ArgumentException("CPF inválido"));

            // Act
            ActionResult<RegisterResponseDto> result = await _controller.Register(registerDto);

            // Assert
            BadRequestObjectResult badRequestResult = Assert.IsType<BadRequestObjectResult>(result.Result);
            Assert.NotNull(badRequestResult.Value);
        }

        [Fact]
        public async Task Register_WithDuplicateCPF_ReturnsBadRequest()
        {
            // Arrange
            RegisterDto registerDto = new RegisterDto
            {
                Nome = "João Silva",
                CPF = "12345678901",
                DataNascimento = new DateTime(1990, 5, 15),
                Password = "123456"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<RegisterCommand>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(new ArgumentException("CPF já cadastrado"));

            // Act
            ActionResult<RegisterResponseDto> result = await _controller.Register(registerDto);

            // Assert
            BadRequestObjectResult badRequestResult = Assert.IsType<BadRequestObjectResult>(result.Result);
            Assert.NotNull(badRequestResult.Value);
        }

        [Fact]
        public async Task Register_WithGenericException_ReturnsInternalServerError()
        {
            // Arrange
            RegisterDto registerDto = new RegisterDto
            {
                Nome = "João Silva",
                CPF = "12345678901",
                DataNascimento = new DateTime(1990, 5, 15),
                Password = "123456"
            };

            _mediatorMock
                .Setup(m => m.Send(It.IsAny<RegisterCommand>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(new Exception("Database connection failed"));

            // Act
            ActionResult<RegisterResponseDto> result = await _controller.Register(registerDto);

            // Assert
            ObjectResult statusCodeResult = Assert.IsType<ObjectResult>(result.Result);
            Assert.Equal(StatusCodes.Status500InternalServerError, statusCodeResult.StatusCode);
        }

        #endregion

        #region Setup Helper Tests

        [Fact]
        public void Constructor_WithValidMediator_CreatesInstance()
        {
            // Arrange & Act
            AuthController controller = new AuthController(_mediatorMock.Object);

            // Assert
            Assert.NotNull(controller);
        }

        #endregion
    }
}