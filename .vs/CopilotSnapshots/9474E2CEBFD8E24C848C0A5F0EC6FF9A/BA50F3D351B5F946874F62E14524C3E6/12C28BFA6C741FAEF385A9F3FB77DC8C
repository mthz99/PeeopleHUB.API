using MediatR;
using Microsoft.AspNetCore.Mvc;
using PeopleHub.Application.DTOs;
using PeopleHub.Application.Features.Auth.Commands;
using PeopleHub.API.Mappers;

namespace PeopleHub.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IMediator _mediator;

        public AuthController(IMediator mediator)
        {
            _mediator = mediator;
        }

        /// <summary>
        /// Realiza login do usuário
        /// </summary>
        /// <param name="loginDto">Credenciais do usuário (username deve ser o CPF)</param>
        /// <returns>Token JWT</returns>
        [HttpPost("login")]
        public async Task<ActionResult<LoginResponseDto>> Login([FromBody] LoginDto loginDto)
        {
            return await ExecuteWithErrorHandling(async () =>
            {
                // Validação adicional no controller para melhor feedback
                if (string.IsNullOrWhiteSpace(loginDto.Username) || string.IsNullOrWhiteSpace(loginDto.Password))
                {
                    return BadRequest(new { message = "Username (CPF) e senha são obrigatórios" });
                }

                LoginCommand command = loginDto.ToLoginCommand();
                LoginResponseDto result = await _mediator.Send(command);
                return Ok(result);
            }, handleUnauthorized: true);
        }

        /// <summary>
        /// Registra um novo usuário
        /// </summary>
        /// <param name="registerDto">Dados para registro do usuário</param>
        /// <returns>Confirmação do registro</returns>
        [HttpPost("register")]
        public async Task<ActionResult<RegisterResponseDto>> Register([FromBody] RegisterDto registerDto)
        {
            return await ExecuteWithErrorHandling(async () =>
            {
                RegisterCommand command = registerDto.ToRegisterCommand();
                RegisterResponseDto result = await _mediator.Send(command);
                return CreatedAtAction(nameof(Login), result);
            });
        }

        #region Private Helper Methods

        private async Task<ActionResult> ExecuteWithErrorHandling(
            Func<Task<ActionResult>> action, 
            bool handleUnauthorized = false)
        {
            try
            {
                return await action();
            }
            catch (UnauthorizedAccessException ex) when (handleUnauthorized)
            {
                return Unauthorized(new { message = ex.Message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Erro interno do servidor", details = ex.Message });
            }
        }

        #endregion
    }
}